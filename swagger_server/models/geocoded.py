# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.result import Result  # noqa: F401,E501
from swagger_server.models.source import Source  # noqa: F401,E501
from swagger_server import util


class Geocoded(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source: Source=None, result: Result=None, bounds: List[str]=None, lat: str=None, lon: str=None):  # noqa: E501
        """Geocoded - a model defined in Swagger

        :param source: The source of this Geocoded.  # noqa: E501
        :type source: Source
        :param result: The result of this Geocoded.  # noqa: E501
        :type result: Result
        :param bounds: The bounds of this Geocoded.  # noqa: E501
        :type bounds: List[str]
        :param lat: The lat of this Geocoded.  # noqa: E501
        :type lat: str
        :param lon: The lon of this Geocoded.  # noqa: E501
        :type lon: str
        """
        self.swagger_types = {
            'source': Source,
            'result': Result,
            'bounds': List[str],
            'lat': str,
            'lon': str
        }

        self.attribute_map = {
            'source': 'source',
            'result': 'result',
            'bounds': 'bounds',
            'lat': 'lat',
            'lon': 'lon'
        }
        self._source = source
        self._result = result
        self._bounds = bounds
        self._lat = lat
        self._lon = lon

    @classmethod
    def from_dict(cls, dikt) -> 'Geocoded':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Geocoded of this Geocoded.  # noqa: E501
        :rtype: Geocoded
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self) -> Source:
        """Gets the source of this Geocoded.


        :return: The source of this Geocoded.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source: Source):
        """Sets the source of this Geocoded.


        :param source: The source of this Geocoded.
        :type source: Source
        """

        self._source = source

    @property
    def result(self) -> Result:
        """Gets the result of this Geocoded.


        :return: The result of this Geocoded.
        :rtype: Result
        """
        return self._result

    @result.setter
    def result(self, result: Result):
        """Sets the result of this Geocoded.


        :param result: The result of this Geocoded.
        :type result: Result
        """

        self._result = result

    @property
    def bounds(self) -> List[str]:
        """Gets the bounds of this Geocoded.


        :return: The bounds of this Geocoded.
        :rtype: List[str]
        """
        return self._bounds

    @bounds.setter
    def bounds(self, bounds: List[str]):
        """Sets the bounds of this Geocoded.


        :param bounds: The bounds of this Geocoded.
        :type bounds: List[str]
        """

        self._bounds = bounds

    @property
    def lat(self) -> str:
        """Gets the lat of this Geocoded.


        :return: The lat of this Geocoded.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat: str):
        """Sets the lat of this Geocoded.


        :param lat: The lat of this Geocoded.
        :type lat: str
        """

        self._lat = lat

    @property
    def lon(self) -> str:
        """Gets the lon of this Geocoded.


        :return: The lon of this Geocoded.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon: str):
        """Sets the lon of this Geocoded.


        :param lon: The lon of this Geocoded.
        :type lon: str
        """

        self._lon = lon
