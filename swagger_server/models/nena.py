# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NENA(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, house_number: str=None, house_number_suffix: str=None, prefix_directional: str=None, street_name: str=None, street_suffix: str=None, post_directional: str=None, community_name: str=None, state: str=None, zip_code: str=None):  # noqa: E501
        """NENA - a model defined in Swagger

        :param house_number: The house_number of this NENA.  # noqa: E501
        :type house_number: str
        :param house_number_suffix: The house_number_suffix of this NENA.  # noqa: E501
        :type house_number_suffix: str
        :param prefix_directional: The prefix_directional of this NENA.  # noqa: E501
        :type prefix_directional: str
        :param street_name: The street_name of this NENA.  # noqa: E501
        :type street_name: str
        :param street_suffix: The street_suffix of this NENA.  # noqa: E501
        :type street_suffix: str
        :param post_directional: The post_directional of this NENA.  # noqa: E501
        :type post_directional: str
        :param community_name: The community_name of this NENA.  # noqa: E501
        :type community_name: str
        :param state: The state of this NENA.  # noqa: E501
        :type state: str
        :param zip_code: The zip_code of this NENA.  # noqa: E501
        :type zip_code: str
        """
        self.swagger_types = {
            'house_number': str,
            'house_number_suffix': str,
            'prefix_directional': str,
            'street_name': str,
            'street_suffix': str,
            'post_directional': str,
            'community_name': str,
            'state': str,
            'zip_code': str
        }

        self.attribute_map = {
            'house_number': 'house_number',
            'house_number_suffix': 'house_number_suffix',
            'prefix_directional': 'prefix_directional',
            'street_name': 'street_name',
            'street_suffix': 'street_suffix',
            'post_directional': 'post_directional',
            'community_name': 'community_name',
            'state': 'state',
            'zip_code': 'zip_code'
        }
        self._house_number = house_number
        self._house_number_suffix = house_number_suffix
        self._prefix_directional = prefix_directional
        self._street_name = street_name
        self._street_suffix = street_suffix
        self._post_directional = post_directional
        self._community_name = community_name
        self._state = state
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt) -> 'NENA':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NENA of this NENA.  # noqa: E501
        :rtype: NENA
        """
        return util.deserialize_model(dikt, cls)

    @property
    def house_number(self) -> str:
        """Gets the house_number of this NENA.


        :return: The house_number of this NENA.
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number: str):
        """Sets the house_number of this NENA.


        :param house_number: The house_number of this NENA.
        :type house_number: str
        """
        if house_number is None:
            raise ValueError("Invalid value for `house_number`, must not be `None`")  # noqa: E501

        self._house_number = house_number

    @property
    def house_number_suffix(self) -> str:
        """Gets the house_number_suffix of this NENA.


        :return: The house_number_suffix of this NENA.
        :rtype: str
        """
        return self._house_number_suffix

    @house_number_suffix.setter
    def house_number_suffix(self, house_number_suffix: str):
        """Sets the house_number_suffix of this NENA.


        :param house_number_suffix: The house_number_suffix of this NENA.
        :type house_number_suffix: str
        """

        self._house_number_suffix = house_number_suffix

    @property
    def prefix_directional(self) -> str:
        """Gets the prefix_directional of this NENA.


        :return: The prefix_directional of this NENA.
        :rtype: str
        """
        return self._prefix_directional

    @prefix_directional.setter
    def prefix_directional(self, prefix_directional: str):
        """Sets the prefix_directional of this NENA.


        :param prefix_directional: The prefix_directional of this NENA.
        :type prefix_directional: str
        """

        self._prefix_directional = prefix_directional

    @property
    def street_name(self) -> str:
        """Gets the street_name of this NENA.


        :return: The street_name of this NENA.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name: str):
        """Sets the street_name of this NENA.


        :param street_name: The street_name of this NENA.
        :type street_name: str
        """
        if street_name is None:
            raise ValueError("Invalid value for `street_name`, must not be `None`")  # noqa: E501

        self._street_name = street_name

    @property
    def street_suffix(self) -> str:
        """Gets the street_suffix of this NENA.


        :return: The street_suffix of this NENA.
        :rtype: str
        """
        return self._street_suffix

    @street_suffix.setter
    def street_suffix(self, street_suffix: str):
        """Sets the street_suffix of this NENA.


        :param street_suffix: The street_suffix of this NENA.
        :type street_suffix: str
        """

        self._street_suffix = street_suffix

    @property
    def post_directional(self) -> str:
        """Gets the post_directional of this NENA.


        :return: The post_directional of this NENA.
        :rtype: str
        """
        return self._post_directional

    @post_directional.setter
    def post_directional(self, post_directional: str):
        """Sets the post_directional of this NENA.


        :param post_directional: The post_directional of this NENA.
        :type post_directional: str
        """

        self._post_directional = post_directional

    @property
    def community_name(self) -> str:
        """Gets the community_name of this NENA.


        :return: The community_name of this NENA.
        :rtype: str
        """
        return self._community_name

    @community_name.setter
    def community_name(self, community_name: str):
        """Sets the community_name of this NENA.


        :param community_name: The community_name of this NENA.
        :type community_name: str
        """
        if community_name is None:
            raise ValueError("Invalid value for `community_name`, must not be `None`")  # noqa: E501

        self._community_name = community_name

    @property
    def state(self) -> str:
        """Gets the state of this NENA.


        :return: The state of this NENA.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this NENA.


        :param state: The state of this NENA.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def zip_code(self) -> str:
        """Gets the zip_code of this NENA.


        :return: The zip_code of this NENA.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code: str):
        """Sets the zip_code of this NENA.


        :param zip_code: The zip_code of this NENA.
        :type zip_code: str
        """

        self._zip_code = zip_code
